
name: Release Package

on:
  workflow_dispatch:

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get version from __init__.py
        id: get_version
        run: |
          # Read the version from kpindex/__init__.py using a Python one-liner
          version=v$(python3 -c "from getversion import getversion; print(getversion())")
          echo "Found version: $version"
          echo "::set-output name=version::$version"

  tag:
    runs-on: ubuntu-latest
    needs: get_version
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Check if tag exists
        id: tag_check
        run: |
          tag="${{ needs.get_version.outputs.version }}"
          if git rev-parse "$tag" >/dev/null 2>&1; then
              echo "Tag $tag already exists"
              echo "::set-output name=exists::true"
              exit 1
          else
              echo "Tag $tag does not exist"
              echo "::set-output name=exists::false"
          fi
          

      - name: Create and Push Tag
        run: |
          tag="${{ needs.get_version.outputs.version }}"
          git tag "$tag"
          git push origin "$tag"

  tests:
    # Use your reusable workflow for manual_test_all
    needs: tag
    uses: ./.github/workflows/reusable_package.yml
    strategy:
      matrix:
        python_version: ["3.10", "3.11", "3.12", "3.13"]
    with:
      run_tests: "true"
      python_version: ${{ matrix.python_version }}

  build:
    needs: [tests, get_version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          # Use a default python version for the Docker target â€“ adjust if needed.
          pyver="3.13"
          pyref="py${pyver//./}"
          docker_image="kpindex:${pyref}"
          echo "Docker image: ${docker_image}"
          echo "docker_image=${docker_image}" >> $GITHUB_ENV
          docker build --target $pyref -t $docker_image .

      - name: Run Docker Container
        run: |
          echo "docker_image is '${{ env.docker_image }}'"
          docker_container=kptest
          echo "docker_container=$docker_container" >> $GITHUB_ENV
          # Run container without --rm so we can interact with it
          docker run --name $docker_container -d ${{ env.docker_image }}

      - name: Build Package
        id: build_pkg
        run: |
          # Build the package inside the container
          docker exec -u kp ${{ env.docker_container }} bash -c "cd /kpindex && source /app/venv/bin/activate && python setup.py bdist_wheel"
          # Find the generated wheel (assumes there's only one)
          pkg=$(docker exec -u kp ${{ env.docker_container }} bash -c "cd /kpindex/dist && ls *.whl")
          echo "Built package: $pkg"
          echo "pkg=$pkg" >> $GITHUB_ENV

      - name: Copy Package to Workspace
        run: |
          echo "Copying package: ${{ env.pkg }}"
          docker cp ${{ env.docker_container }}:/kpindex/dist/${{ env.pkg }} .
          ls -la .
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get_version.outputs.version }}
          release_name: "Release ${{ needs.get_version.outputs.version }}"
          draft: false
          prerelease: false

      - name: Upload Package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.pkg }}
          asset_name: ${{ env.pkg }}
          asset_content_type: application/octet-stream

      - name: Prepare Package for PyPI
        run: |
          mkdir -p dist
          mv ${{ env.pkg }} dist/
          ls -la dist

      - name: Publish Package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
